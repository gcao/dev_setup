" Modeline and Notes {
" http://vim.wikia.com/wiki/Modeline_magic
" vim: set foldmarker={,} foldlevel=0 foldmethod=marker :
" }

" Run below commands to set up vim {
" curl http://j.mp/spf13-vim3 -L -o - | sh
" ln -s ~/proj/dev_setup/home/_vimrc.local ~/.vimrc.local
" ln -s ~/proj/dev_setup/home/_vimrc.bundles.local ~/.vimrc.bundles.local
" Use below command to reload vim with updated configuration
" vim +BundleInstall! +BundleClean +q
" }

syntax enable
set background=dark
"color molokai
"color tolerable
color solarized
"color Monokai

set shell=/bin/zsh

set nospell
set nopaste
" http://stackoverflow.com/questions/2861627/vim-paste-in-insert-mode
" http://vim.wikia.com/wiki/Toggle_auto-indenting_for_code_paste
set pastetoggle=<F2>
set wrap
set hidden  " Don't prompt to save buffer when changing to another buffer
set expandtab  "Use :retab to replace tabs with spaces
set shiftwidth=2
set tabstop=2
set autoindent
set nosmartindent " See http://vim.wikia.com/wiki/Indenting_source_code
set smarttab
set clipboard=unnamed " Default to copy to system clipboard
set nolist " Hide invisible charasters
set listchars=tab:,.,trail:.,extends:#,nbsp:. " Highlight problematic whitespace
set foldmethod=syntax " :help fold
set foldlevelstart=5
 
" https://coderwall.com/p/tqns-w
set exrc
set secure

" http://lokaltog.github.com/powerline/overview.html#installation
"python from powerline.ext.vim import source_plugin; source_plugin()
"source /usr/local/lib/python2.7/site-packages/powerline/ext/vim/powerline.vim

let mapleader=","

" functions: http://www.ibm.com/developerworks/linux/library/l-vim-script-2/index.html

" The Smash Escape {
  " http://vimbits.com/bits/180
  inoremap jk <Esc>
  inoremap kj <Esc>
" }

" Movement in Insert mode - disabled {
  "inoremap <A-h> <C-o>h
  "inoremap <A-j> <C-o>j
  "inoremap <A-k> <C-o>k
  "inoremap <A-l> <C-o>l
  "inoremap <A-w> <C-o>w
  "inoremap <A-b> <C-o>b
  "inoremap <A-e> <C-o>e
" }

nnoremap /    /\v
" // to not highlight search result
nnoremap //   :nohlsearch<CR>

" fold open/close at cursor location
nnoremap zz   za

" Alignment by Tabularize {
  " /,/l1l0 to remove space before ',' but add one after ','
  nmap <Leader>a :Tabularize /
  vmap <Leader>a :Tabularize /
  nmap <Leader>a, :Tabularize /,/l0l1<CR>
  vmap <Leader>a, :Tabularize /,/l0l1<CR>
  nmap <Leader>a= :Tabularize /=<CR>
  vmap <Leader>a= :Tabularize /=<CR>
  nmap <Leader>a> :Tabularize /=><CR>
  vmap <Leader>a> :Tabularize /=><CR>
  nmap <Leader>a<space> :Tabularize / /l0l0<CR>
  vmap <Leader>a<space> :Tabularize / /l0l0<CR>
" }

"nmap <Leader>k :Ack<Space>
nmap <Leader>k :Ag<Space>

" Ctrl+A to select all
nnoremap <C-A> ggVGy
" Ctrl+I to delete all
nnoremap <C-I> gg1000d<CR>i

" Disable arrow keys {
  " based on recommendations on http://blog.sanctum.geek.nz/vim-anti-patterns/
  nnoremap <Up> <nop>
  nnoremap <Down> <nop>
  nnoremap <Left> <nop>
  nnoremap <Right> <nop>
" }

" http://vimbits.com/bits/25
" Use gj/gk to move in wrapped lines
if mapcheck('k', 'n')
  unmap j
  unmap k
endif

" Use mm and `` to set mark quickly
nnoremap `` `m
nnoremap <Leader>` :marks<CR>

" http://vimbits.com/bits/11
" Make Y behave like other capitals
nnoremap Y y$

" Reselect visual block after indent/outdent
vnoremap < <gv
vnoremap > >gv

" http://stackoverflow.com/questions/7163947/vim-paste-multiple-times
" 'p' to paste, 'gv' to re-select what was originally selected. 'y' to copy it again.
xnoremap p pgvy

nnoremap cc xi

nmap ;  :
nmap !  :!
nnoremap <Leader><Space> :map<Space>

nnoremap \ :CommandT<CR>
nnoremap <Leader>f :CommandTFlush<CR>

nnoremap <Leader>eh :e ~/work/dev_contrib/firefox/ProteusIndex.html<CR>
nnoremap <Leader>ez :e ~/.zshrc.local<CR>
nnoremap <Leader>em :e ~/.tmux.conf<CR>
nnoremap <Leader>ev :e ~/.vimrc.local<CR>

if !exists("vimrc_autocommands_loaded")
  let vimrc_autocommands_loaded = 1
  " http://vimbits.com/bits/128
  " automatically reload vimrc when it's saved
  au BufWritePost .vimrc so ~/.vimrc
  au BufWritePost .vimrc.local so ~/.vimrc.local
  au BufWritePost .vimrc.local PowerlineReloadColorscheme
endif

nnoremap <Leader>tt :TagbarToggle<CR><C-w>l
nnoremap <Leader>t/ :TagbarToggle<CR><C-w>l/

" Use qq to record a quick macro and @@ to replay it
nnoremap @@ @q

" http://vim.wikia.com/wiki/Set_working_directory_to_the_current_file
"autocmd BufEnter * silent! lcd %:p:h

" Remove trailing spaces
nnoremap <Leader>spa :%s/\v\s+$<CR>

" Wrap word with "
nnoremap <Leader>" i"<ESC>wwi"<ESC>
" Wrap word with '
nnoremap <Leader>' i'<ESC>wwi'<ESC>

" Map ,XXX to go to buffer XXX - disabled {
  "nnoremap <Leader>0 :10b<CR>

  "for i in range(1,200)
  "  execute "nnoremap <Leader>".i." :".i."b<CR>"
  "endfor

  "nnoremap <Leader><Leader>0 :10b<CR>
  "for i in range(1,9)
  "  execute "nnoremap <Leader><Leader>".i." :".i."b<CR>"
  "endfor

  "ruby <<EOF
  "1.upto 400 do |i|
  "  VIM.command "nnoremap <Leader>#{i} :#{i}b<CR>"
  "end
  "EOF
" }

"nnoremap <Leader>, :bp<CR>
nnoremap H :bp<CR>
"nnoremap <Leader>. :bn<CR>
nnoremap L :bn<CR>
nnoremap <Leader>x :bd<CR>
nnoremap <Leader>X :BD<CR>

" Conque - disabled {
  " http://code.google.com/p/conque/wiki/Usage
  "let g:ConqueTerm_FastMode = 1
  "let g:ConqueTerm_InsertOnEnter = 1
  "let g:ConqueTerm_CWInsert = 1
  "" http://code.google.com/p/conque/wiki/Usage
  "nnoremap <Leader>shh :ConqueTermSplit  zsh<CR>
  "nnoremap <Leader>shv :ConqueTermVSplit zsh<CR>
" }

" CtrlP {
  " do not manage working directory
  let g:ctrlp_working_path_mode = 0
  let g:ctrlp_cmd = 'CtrlPBuffer' " Search in Files, Buffers and MRU files at the same time.
  let g:ctrlp_max_history = 50
  let g:ctrlp_mruf_max = 50

  " https://github.com/kien/ctrlp.vim/issues/280#issuecomment-8638286
  let g:ctrlp_buffer_func = { 'enter': 'MyCtrlPMappings' }

  func! MyCtrlPMappings()
    nnoremap <buffer> <silent> <c-@> :call <sid>DeleteBuffer()<cr>
  endfunc

  func! s:DeleteBuffer()
    exec "bd" fnamemodify(getline('.')[2:], ':p')
    exec "norm \<F5>"
  endfunc
" }

" Buffers
"<C-6> to switch between current and last accessed buffer

" http://stackoverflow.com/questions/53664/how-to-effectively-work-with-multiple-files-in-vim/53702#53702
" Ctrl+Shift+6 to switch between 2 files 

" Remove auto close for " because it causes problem when editting vim files
"iunmap "

" ctags {
  nnoremap <leader>ct :!/usr/local/bin/ctags -R app vendor lib public/javascripts/<CR>
  if !("coffeescript_autocmd_loaded")
    let coffeescript_autocmd_loaded = 1
    autocmd BufWritePost * if filereadable('tags') | call system('ctags -a '.expand('%')) | endif
  endif
  nnoremap <c-[> :pop<CR>
  vnoremap <c-[> :pop<CR>
" }

" Tmux - disabled {
  " https://github.com/jgdavey/tslime.vim
  "vmap <C-x> <Plug>SendSelectionToTmux
  "nmap <C-x> <Plug>NormalModeSendToTmux
  "nmap <Leader>tmux <Plug>SetTmuxVars
  " Example for running a command in tmux
  "nmap \\ :Tmux ls<CR>

  " Open tmux command buffer
  "nnoremap <Leader>em :e ~/.vim-tmux<CR>
  " Map <CR> in insert mode
  "autocmd BufEnter .vim-tmux inoremap <CR> <ESC><C-x>
  "autocmd BufLeave .vim-tmux iunmap <CR>
" }

" XML/HTML formatting {
  " xmllint is part of libxml2
  " http://vim.wikia.com/wiki/Format_your_xml_document_using_xmllint
  nnoremap <Leader>tidy !xmllint --format -<CR>
  vnoremap <Leader>tidy !xmllint --format -<CR>
" }

" Maximize buffer {
  " http://vim.wikia.com/wiki/Maximize_window_and_return_to_previous_split_structure
  nnoremap <C-W>o :call MaximizeToggle ()<CR>
  inoremap <C-W>o :call MaximizeToggle ()<CR>

  function! MaximizeToggle()
    if exists("s:maximize_session")
      exec "source " . s:maximize_session
      call delete(s:maximize_session)
      unlet s:maximize_session
      let &hidden=s:maximize_hidden_save
      unlet s:maximize_hidden_save
    else
      let s:maximize_hidden_save = &hidden
      let s:maximize_session = tempname()
      set hidden
      exec "mksession! " . s:maximize_session
      only
    endif
  endfunction
" }

" https://github.com/spf13/spf13-vim/issues/68
autocmd BufNewFile,BufRead *.coffee set filetype=coffee

" <tab> was mapped to delete file content which is annoying
if mapcheck('<tab>', 'n')
  unmap <tab>
endif
if mapcheck('<esc>', 'n')
  unmap <esc>
endif

nnoremap <space> i <esc>l
"nnoremap <cr> i<cr><esc>
nnoremap <backspace> X

" http://stackoverflow.com/questions/6126871/easymotion-coloring-in-vim-with-solarized-theme
" change the default EasyMotion shading to something more readable with Solarized
hi link EasyMotionTarget ErrorMsg
hi link EasyMotionShade  Comment

" Open URL in browser {
  " http://vim.wikia.com/wiki/Open_a_web-browser_with_the_URL_in_the_current_line
  function! HandleURI()
    let s:uri = matchstr(getline("."), '[a-z]*:\/\/[^ >,;:]*')
    echo s:uri
    if s:uri != ""
      exec "!open \"" . s:uri . "\""
    else
      echo "No URI found in line."
    endif
  endfunction
  map <Leader>w :call HandleURI()<CR>
" }

nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

" rr=$HOME/bin/rr will move focus to the right pane of iTerm and run arguments as a
" command in the shell
nnoremap <Leader>r :!rr ruby %<CR>
nnoremap <F2>      :!rr 
nnoremap <S-F2>    :!rrr

" Run this file
nnoremap <F6>      :!%<CR>

" Run external command in current line {
  "function! RunThis()
  "  let s:cmd = substitute(getline("."), "^[#$\"]", "", "")
  "  echo s:cmd
  "  if s:cmd != ""
  "    let s:vimCmd = matchstr(s:cmd, 'vim \zs.*')
  "    if s:vimCmd != ""
  "      exec s:vimCmd
  "    else
  "      exec "!" . s:cmd
  "    endif
  "  else
  "    echo "No command found in line."
  "  endif
  "endfunction
  function! RunThis()
    let s:cmd = substitute(getline("."), "^[#$\"]", "", "")
    echo s:cmd
    if s:cmd != ""
      let s:vimCmd = matchstr(s:cmd, 'vim \zs.*')
      if s:vimCmd != ""
        exec s:vimCmd
      else
        ruby <<EOF
          command = <<-APPLESCRIPT
          tell application "iTerm" to activate
          set the clipboard to "#{VIM.evaluate('s:cmd')}"
          tell application "System Events"
            tell process "iTerm"
              keystroke "l" using {control down, shift down}
              -- paste content
              tell application "System Events" to keystroke "v" using command down
              keystroke return
              keystroke "h" using {control down, shift down}
              keystroke return
            end tell
          end tell
          APPLESCRIPT

          file = '/tmp/test99.scpt'
          File.open file, 'w' do |f|
            f.print "osascript -e '#{command}'"
          end
          VIM.command "!sh #{file}"
EOF
      end
    else
      echo "No command found in line."
    endif
  endfunction
  map <F4>      :call RunThis()<CR>
  map <Leader>v :call RunThis()<CR>
  map <F5> :source %<CR>
" }

" vim e +507 ~/.vimrc
let g:indent_guides_enable_on_vim_startup = 0

" NERDTree {
  " http://stackoverflow.com/questions/1979520/auto-open-nerdtree-in-every-tab
  "autocmd VimEnter * NERDTree
  "autocmd VimEnter * wincmd w
  "autocmd BufEnter * NERDTreeMirror
  let NERDTreeQuitOnOpen=0
  if mapcheck('<Leader>e', 'n')
    unmap <Leader>e
  end
  map <C-e> :NERDTreeFind<CR>
  map <F3> :NERDTreeToggle<CR>:NERDTreeMirror<CR>
  map <F10> <C-w>o
" }

" Hints:
" ':verbose COMMAND' to show more detail of command result
" ? is search backward from end of the file, is the reverse of /.
