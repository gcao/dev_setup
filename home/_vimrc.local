" Run below command to set up vim
" curl http://j.mp/spf13-vim3 -L -o - | sh
" ln -s ~/proj/dev_setup/home/_vimrc_local ~/.vimrc.local
" Use below command to reload vim with updated configuration
" vim +BundleInstall! +BundleClean +q

"color molokai
color tolerable
"color Monokai

set nospell
set nopaste
" http://stackoverflow.com/questions/2861627/vim-paste-in-insert-mode
" http://vim.wikia.com/wiki/Toggle_auto-indenting_for_code_paste
set pastetoggle=<F2>
set wrap
set hidden  " Don't prompt to save buffer when changing to another buffer
set expandtab  "Use :retab to replace tabs with spaces
set shiftwidth=2
set tabstop=2
set autoindent
set nosmartindent " See http://vim.wikia.com/wiki/Indenting_source_code
set smarttab
set clipboard=unnamed " Default to copy to system clipboard
set nolist " Hide invisible charasters
set listchars=tab:,.,trail:.,extends:#,nbsp:. " Highlight problematic whitespace
set foldmethod=syntax " :help fold
set foldlevelstart=1

let mapleader=","

" Functions: http://www.ibm.com/developerworks/linux/library/l-vim-script-2/index.html

" The Smash Escape
" http://vimbits.com/bits/180
inoremap jk <Esc>
inoremap kj <Esc>

nnoremap /    /\v
nnoremap //   /\vxzz<CR>

" fold open/close at cursor location
nnoremap zz   za

" /,/l1l0 to remove space before ',' but add one after ','
nmap <Leader>a :Tabularize /
vmap <Leader>a :Tabularize /
nmap <Leader>a, :Tabularize /,/l0l1<CR>
vmap <Leader>a, :Tabularize /,/l0l1<CR>
nmap <Leader>a= :Tabularize /=<CR>
vmap <Leader>a= :Tabularize /=<CR>
nmap <Leader>a> :Tabularize /=><CR>
vmap <Leader>a> :Tabularize /=><CR>

nmap <Leader>k :Ack<Space>

" Ctrl+A to select all
nnoremap <C-A> ggVGy
" Ctrl+I to delete all
nnoremap <C-I> gg1000d<CR>i

" Disable arrow keys - based on recommendations on http://blog.sanctum.geek.nz/vim-anti-patterns/
nnoremap <Up> <nop>
nnoremap <Down> <nop>
nnoremap <Left> <nop>
nnoremap <Right> <nop>

nnoremap <C-J> <C-W>j
nnoremap <C-K> <C-W>k
nnoremap <C-H> <C-W>h
nnoremap <C-L> <C-W>l

" http://vimbits.com/bits/25
" Improve up/down movement on wrapped lines
"nnoremap j gj
"nnoremap k gk

" Use mm and `` to set mark quickly
nnoremap `` `m

" http://vimbits.com/bits/11
" Make Y behave like other capitals
nnoremap Y y$

" http://stackoverflow.com/questions/7163947/vim-paste-multiple-times
" 'p' to paste, 'gv' to re-select what was originally selected. 'y' to copy it again.
xnoremap p pgvy

nnoremap cc xi

nmap ;  :
nnoremap <Leader><Space> :map<Space>

nnoremap <Leader>f :CommandTFlush<CR>

nnoremap <Leader>el :e ~/.vimrc.local<CR>
nnoremap <Leader>sl :so ~/.vimrc.local<CR>

" http://vimbits.com/bits/128
" automatically reload vimrc when it's saved
au BufWritePost .vimrc so ~/.vimrc
au BufWritePost .vimrc.local so ~/.vimrc.local

" https://github.com/scrooloose/nerdtree
"autocmd vimenter * NERDTree
"autocmd vimenter * if !argc() | NERDTree | endif
nnoremap <Leader>ee :NERDTreeToggle<CR><C-w>j

nnoremap <Leader>mb <Plug>MiniBufExplorer<CR><C-w>j

nnoremap <Leader>tt :TagbarToggle<CR><C-w>l

" Use qq to record a quick macro and @@ to replay it
nnoremap @@ @q

" http://vim.wikia.com/wiki/Set_working_directory_to_the_current_file
"autocmd BufEnter * silent! lcd %:p:h

" Remove trailing spaces
nnoremap <Leader>spa :%s/\v\s+$<CR>

" Wrap word with "
nnoremap <Leader>" i"<ESC>wwi"<ESC>
" Wrap word with '
nnoremap <Leader>' i'<ESC>wwi'<ESC>

" Map ,XXX to go to buffer XXX
nnoremap <Leader>0 :10b<CR>

for i in range(1,200)
  execute "nnoremap <Leader>".i." :".i."b<CR>"
endfor

nnoremap <Leader><Leader>0 :10b<CR>
for i in range(1,9)
  execute "nnoremap <Leader><Leader>".i." :".i."b<CR>"
endfor

"ruby <<EOF
"1.upto 400 do |i|
"  VIM.command "nnoremap <Leader>#{i} :#{i}b<CR>"
"end
"EOF

"nnoremap <Leader>, :bp<CR>
nnoremap H :bp<CR>
"nnoremap <Leader>. :bn<CR>
nnoremap L :bn<CR>
nnoremap <Leader>x :bd<CR>

" Conque http://code.google.com/p/conque/wiki/Usage
let g:ConqueTerm_FastMode = 1
let g:ConqueTerm_InsertOnEnter = 1
let g:ConqueTerm_CWInsert = 1

" CtrlP: do not manage working directory
let g:ctrlp_working_path_mode = 0
let g:ctrlp_cmd = 'CtrlPBuffer' " Search in Files, Buffers and MRU files at the same time.
let g:ctrlp_max_history = 50
let g:ctrlp_mruf_max = 50
nnoremap <c-p> :CtrlPBuffer<CR>

" http://stackoverflow.com/questions/53664/how-to-effectively-work-with-multiple-files-in-vim/53702#53702
" Ctrl+Shift+6 to switch between 2 files 

" Remove auto close for " because it causes problem when editting vim files
"iunmap "

" <tab> was mapped to delete file content which is annoying
iunmap <tab>

nnoremap <Leader>r :!ruby %<CR>

" vim-slime
let g:slime_target = "tmux"
let g:slime_no_mappings="yes"

" ctags
nnoremap <leader>ct :!/usr/local/bin/ctags -R app vendor lib public/javascripts/ public/stylesheets/ public/triton<CR>
autocmd BufWritePost * if filereadable('tags') | call system('ctags -a '.expand('%')) | endif

" Open tmux command buffer
nnoremap <Leader>em :e ~/.vim-tmux<CR>
" Map <CR> in insert mode
"autocmd BufEnter .vim-tmux inoremap <CR> <ESC><C-c><C-c>j<S-a>
"autocmd BufLeave .vim-tmux iunmap <CR>

" Buffers
"<C-6> to switch between current and last accessed buffer

" xmllint is part of libxml2
" http://vim.wikia.com/wiki/Format_your_xml_document_using_xmllint
nnoremap <Leader>tidy !xmllint --format -<CR>
vnoremap <Leader>tidy !xmllint --format -<CR>

" http://code.google.com/p/conque/wiki/Usage
nnoremap <Leader>shh :ConqueTermSplit bash -login<CR>
nnoremap <Leader>shv :ConqueTermVSplit bash -login<CR>

" http://vim.wikia.com/wiki/Maximize_window_and_return_to_previous_split_structure
nnoremap <C-W>o :call MaximizeToggle ()<CR>
inoremap <C-W>o :call MaximizeToggle ()<CR>

function! MaximizeToggle()
  if exists("s:maximize_session")
    exec "source " . s:maximize_session
    call delete(s:maximize_session)
    unlet s:maximize_session
    let &hidden=s:maximize_hidden_save
    unlet s:maximize_hidden_save
  else
    let s:maximize_hidden_save = &hidden
    let s:maximize_session = tempname()
    set hidden
    exec "mksession! " . s:maximize_session
    only
  endif
endfunction

" https://github.com/spf13/spf13-vim/issues/68
autocmd BufNewFile,BufRead *.coffee set filetype=coffee
unmap <tab>

