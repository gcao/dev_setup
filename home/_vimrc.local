" Run below commands to set up vim
" curl http://j.mp/spf13-vim3 -L -o - | sh
" ln -s ~/proj/dev_setup/home/_vimrc.local ~/.vimrc.local
" ln -s ~/proj/dev_setup/home/_vimrc.bundles.local ~/.vimrc.bundles.local
" Use below command to reload vim with updated configuration
" vim +BundleInstall! +BundleClean +q
"
syntax enable
set background=dark
"color molokai
"color tolerable
color solarized
"color Monokai

set shell=/bin/zsh

set nospell
set nopaste
" http://stackoverflow.com/questions/2861627/vim-paste-in-insert-mode
" http://vim.wikia.com/wiki/Toggle_auto-indenting_for_code_paste
set pastetoggle=<F2>
set wrap
set hidden  " Don't prompt to save buffer when changing to another buffer
set expandtab  "Use :retab to replace tabs with spaces
set shiftwidth=2
set tabstop=2
set autoindent
set nosmartindent " See http://vim.wikia.com/wiki/Indenting_source_code
set smarttab
set clipboard=unnamed " Default to copy to system clipboard
set nolist " Hide invisible charasters
set listchars=tab:,.,trail:.,extends:#,nbsp:. " Highlight problematic whitespace
set foldmethod=syntax " :help fold
set foldlevelstart=5
 
" http://lokaltog.github.com/powerline/overview.html#installation
"python from powerline.ext.vim import source_plugin; source_plugin()
"source /usr/local/lib/python2.7/site-packages/powerline/ext/vim/powerline.vim

let mapleader=","

" Functions: http://www.ibm.com/developerworks/linux/library/l-vim-script-2/index.html

" The Smash Escape
" http://vimbits.com/bits/180
inoremap jk <Esc>
inoremap kj <Esc>

"inoremap <A-h> <C-o>h
"inoremap <A-j> <C-o>j
"inoremap <A-k> <C-o>k
"inoremap <A-l> <C-o>l
"inoremap <A-w> <C-o>w
"inoremap <A-b> <C-o>b
"inoremap <A-e> <C-o>e

nnoremap /    /\v
nnoremap //   /\vxzz<CR>

" fold open/close at cursor location
nnoremap zz   za

" /,/l1l0 to remove space before ',' but add one after ','
nmap <Leader>a :Tabularize /
vmap <Leader>a :Tabularize /
nmap <Leader>a, :Tabularize /,/l0l1<CR>
vmap <Leader>a, :Tabularize /,/l0l1<CR>
nmap <Leader>a= :Tabularize /=<CR>
vmap <Leader>a= :Tabularize /=<CR>
nmap <Leader>a> :Tabularize /=><CR>
vmap <Leader>a> :Tabularize /=><CR>

nmap <Leader>k :Ack<Space>

" Ctrl+A to select all
nnoremap <C-A> ggVGy
" Ctrl+I to delete all
nnoremap <C-I> gg1000d<CR>i

" Disable arrow keys - based on recommendations on http://blog.sanctum.geek.nz/vim-anti-patterns/
nnoremap <Up> <nop>
nnoremap <Down> <nop>
nnoremap <Left> <nop>
nnoremap <Right> <nop>

"nnoremap <C-J> <C-W>j
"nnoremap <C-K> <C-W>k
"nnoremap <C-H> <C-W>h
"nnoremap <C-L> <C-W>l

" http://vimbits.com/bits/25
" Use gj/gk to move in wrapped lines
unmap j
unmap k

" Use mm and `` to set mark quickly
nnoremap `` `m
nnoremap <Leader>` :marks<CR>

" http://vimbits.com/bits/11
" Make Y behave like other capitals
nnoremap Y y$

" http://stackoverflow.com/questions/7163947/vim-paste-multiple-times
" 'p' to paste, 'gv' to re-select what was originally selected. 'y' to copy it again.
xnoremap p pgvy

nnoremap cc xi

nmap ;  :
nmap !  :!
nnoremap <Leader><Space> :map<Space>

nnoremap s :CommandT<CR>
"Force to use t to find files
"unmap <Leader>t
nnoremap <Leader>f :CommandTFlush<CR>

nnoremap <Leader>eh :e ~/work/dev_contrib/firefox/ProteusIndex.html<CR>
nnoremap <Leader>ez :e ~/.zshrc.local<CR>
nnoremap <Leader>em :e ~/.tmux.conf<CR>
nnoremap <Leader>ev :e ~/.vimrc.local<CR>

" http://vimbits.com/bits/128
" automatically reload vimrc when it's saved
au BufWritePost .vimrc so ~/.vimrc
au BufWritePost .vimrc.local so ~/.vimrc.local

nnoremap <Leader>mb <Plug>MiniBufExplorer<CR><C-w>j

nnoremap <Leader>tt :TagbarToggle<CR><C-w>l
nnoremap <Leader>t/ :TagbarToggle<CR><C-w>l/

" Use qq to record a quick macro and @@ to replay it
nnoremap @@ @q

" http://vim.wikia.com/wiki/Set_working_directory_to_the_current_file
"autocmd BufEnter * silent! lcd %:p:h

" Remove trailing spaces
nnoremap <Leader>spa :%s/\v\s+$<CR>

" Wrap word with "
nnoremap <Leader>" i"<ESC>wwi"<ESC>
" Wrap word with '
nnoremap <Leader>' i'<ESC>wwi'<ESC>

" Map ,XXX to go to buffer XXX
nnoremap <Leader>0 :10b<CR>

for i in range(1,200)
  execute "nnoremap <Leader>".i." :".i."b<CR>"
endfor

nnoremap <Leader><Leader>0 :10b<CR>
for i in range(1,9)
  execute "nnoremap <Leader><Leader>".i." :".i."b<CR>"
endfor

"ruby <<EOF
"1.upto 400 do |i|
"  VIM.command "nnoremap <Leader>#{i} :#{i}b<CR>"
"end
"EOF

"nnoremap <Leader>, :bp<CR>
nnoremap H :bp<CR>
"nnoremap <Leader>. :bn<CR>
nnoremap L :bn<CR>
nnoremap <Leader>x :bd<CR>

"" Conque http://code.google.com/p/conque/wiki/Usage
"let g:ConqueTerm_FastMode = 1
"let g:ConqueTerm_InsertOnEnter = 1
"let g:ConqueTerm_CWInsert = 1
"" http://code.google.com/p/conque/wiki/Usage
"nnoremap <Leader>shh :ConqueTermSplit  zsh<CR>
"nnoremap <Leader>shv :ConqueTermVSplit zsh<CR>


" CtrlP: do not manage working directory
let g:ctrlp_working_path_mode = 0
let g:ctrlp_cmd = 'CtrlPBuffer' " Search in Files, Buffers and MRU files at the same time.
let g:ctrlp_max_history = 50
let g:ctrlp_mruf_max = 50

" https://github.com/kien/ctrlp.vim/issues/280#issuecomment-8638286
let g:ctrlp_buffer_func = { 'enter': 'MyCtrlPMappings' }

func! MyCtrlPMappings()
  nnoremap <buffer> <silent> <c-@> :call <sid>DeleteBuffer()<cr>
endfunc

func! s:DeleteBuffer()
  exec "bd" fnamemodify(getline('.')[2:], ':p')
  exec "norm \<F5>"
endfunc

" http://stackoverflow.com/questions/53664/how-to-effectively-work-with-multiple-files-in-vim/53702#53702
" Ctrl+Shift+6 to switch between 2 files 

" Remove auto close for " because it causes problem when editting vim files
"iunmap "

nnoremap <Leader>r :!source .rvmrc; ruby %<CR>

" ctags
nnoremap <leader>ct :!/usr/local/bin/ctags -R app vendor lib public/javascripts/<CR>
autocmd BufWritePost * if filereadable('tags') | call system('ctags -a '.expand('%')) | endif
nnoremap <c-[> :pop<CR>
vnoremap <c-[> :pop<CR>

" https://github.com/jgdavey/tslime.vim
"vmap <C-x> <Plug>SendSelectionToTmux
"nmap <C-x> <Plug>NormalModeSendToTmux
"nmap <Leader>tmux <Plug>SetTmuxVars
" Example for running a command in tmux
"nmap \\ :Tmux ls<CR>

" Open tmux command buffer
"nnoremap <Leader>em :e ~/.vim-tmux<CR>
" Map <CR> in insert mode
"autocmd BufEnter .vim-tmux inoremap <CR> <ESC><C-x>
"autocmd BufLeave .vim-tmux iunmap <CR>

" Buffers
"<C-6> to switch between current and last accessed buffer

" xmllint is part of libxml2
" http://vim.wikia.com/wiki/Format_your_xml_document_using_xmllint
nnoremap <Leader>tidy !xmllint --format -<CR>
vnoremap <Leader>tidy !xmllint --format -<CR>

" http://vim.wikia.com/wiki/Maximize_window_and_return_to_previous_split_structure
nnoremap <C-W>o :call MaximizeToggle ()<CR>
inoremap <C-W>o :call MaximizeToggle ()<CR>

function! MaximizeToggle()
  if exists("s:maximize_session")
    exec "source " . s:maximize_session
    call delete(s:maximize_session)
    unlet s:maximize_session
    let &hidden=s:maximize_hidden_save
    unlet s:maximize_hidden_save
  else
    let s:maximize_hidden_save = &hidden
    let s:maximize_session = tempname()
    set hidden
    exec "mksession! " . s:maximize_session
    only
  endif
endfunction

" https://github.com/spf13/spf13-vim/issues/68
autocmd BufNewFile,BufRead *.coffee set filetype=coffee

" <tab> was mapped to delete file content which is annoying
unmap <tab>
unmap <esc>

nnoremap <space> i <esc>l
nnoremap <backspace> X

" http://stackoverflow.com/questions/6126871/easymotion-coloring-in-vim-with-solarized-theme
" change the default EasyMotion shading to something more readable with Solarized
hi link EasyMotionTarget ErrorMsg
hi link EasyMotionShade  Comment

" http://vim.wikia.com/wiki/Open_a_web-browser_with_the_URL_in_the_current_line
function! HandleURI()
  let s:uri = matchstr(getline("."), '[a-z]*:\/\/[^ >,;:]*')
  echo s:uri
  if s:uri != ""
    exec "!open \"" . s:uri . "\""
  else
    echo "No URI found in line."
  endif
endfunction
map <Leader>w :call HandleURI()<CR>

nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

" Run stuff after 'vim'
function! RunInVim()
  let s:cmd = matchstr(getline("."), 'vim \zs.*')
  echo s:cmd
  if s:cmd != ""
    exec s:cmd
  else
    echo "No vim command found in line."
  endif
endfunction
map <Leader>v :call RunInVim()<CR>
map <C-x> :call RunInVim()<CR>

" vim e +507 ~/.vimrc
let g:indent_guides_enable_on_vim_startup = 0

" http://stackoverflow.com/questions/1979520/auto-open-nerdtree-in-every-tab
"autocmd VimEnter * NERDTree
"autocmd VimEnter * wincmd w
"autocmd BufEnter * NERDTreeMirror

