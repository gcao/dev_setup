" Modeline and Notes {
" http://vim.wikia.com/wiki/Modeline_magic
" vim: set foldmarker={,} foldlevel=0 foldmethod=marker :
" }

" Run below commands to set up vim {
" curl http://j.mp/spf13-vim3 -L -o - | sh
" ln -s ~/proj/dev_setup/home/_vimrc.local ~/.vimrc.local
" ln -s ~/proj/dev_setup/home/_vimrc.bundles.local ~/.vimrc.bundles.local
" Use below command to reload vim with updated configuration
" vim +BundleInstall! +BundleClean +q
" }

"http://stackoverflow.com/a/10739962/120151
set ttimeout
set ttimeoutlen=50

syntax enable
set encoding=utf-8
set background=dark
"color molokai
"color tolerable
color solarized
"color Monokai

"set shell=/bin/zsh\ -i
set shell=/bin/zsh

set ff=unix
set nospell
set nopaste
" http://stackoverflow.com/questions/2861627/vim-paste-in-insert-mode
" http://vim.wikia.com/wiki/Toggle_auto-indenting_for_code_paste
set pastetoggle=<F2>
set wrap
set hidden  " Don't prompt to save buffer when changing to another buffer
set expandtab  "Use :retab to replace tabs with spaces
set shiftwidth=2
set tabstop=2
set softtabstop=2
set autoindent
set nosmartindent " See http://vim.wikia.com/wiki/Indenting_source_code
set smarttab
" See http://items.sjbach.com/319/configuring-vim-right
set wildmode=list:longest
set scrolloff=100
set ignorecase
set smartcase
set relativenumber
set iskeyword-=.
"set wildignore+=build,target,coverage,node_modules

" http://stackoverflow.com/questions/11404800/fix-vim-tmux-yank-paste-on-unnamed-register
"if $TMUX == ''
  set clipboard=unnamed " Default to copy to system clipboard
"endif

set nolist " Hide invisible charasters
set listchars=tab:,.,trail:.,extends:#,nbsp:. " Highlight problematic whitespace

" Fold {
  " to disable autocmd, use augroup, see http://superuser.com/a/719023
  func! Fold()
    augroup FOLD
    set foldenable foldlevelstart=5 foldlevel=5
    autocmd BufEnter    * set foldlevelstart=5 foldlevel=5
    autocmd BufWinEnter * set foldlevelstart=5 foldlevel=5
    augroup END
  endfunc

  func! Nofold()
    set nofoldenable
    autocmd! FOLD BufEnter    *
    autocmd! FOLD BufWinEnter *
  endfunc

  call Fold()
  call Nofold()

  nnoremap <leader>fe :call Fold()
  nnoremap <leader>fd :call Nofold()
" }

autocmd BufWinEnter * set iskeyword-=.

" https://coderwall.com/p/tqns-w
set exrc
set secure

" http://stackoverflow.com/a/12814727
if has('mac') && ($TERM == 'xterm-256color' || $TERM == 'screen' || $TERM == 'screen-256color')
  map <Esc>OP <F1>
  map <Esc>OQ <F2>
  map <Esc>OR <F3>
  map <Esc>OS <F4>
  map <Esc>[16~ <F5>
  map <Esc>[17~ <F6>
  map <Esc>[18~ <F7>
  map <Esc>[19~ <F8>
  map <Esc>[20~ <F9>
  map <Esc>[21~ <F10>
  map <Esc>[23~ <F11>
  map <Esc>[24~ <F12>
endif

" http://lokaltog.github.com/powerline/overview.html#installation
"python from powerline.ext.vim import source_plugin; source_plugin()
"source /usr/local/lib/python2.7/site-packages/powerline/ext/vim/powerline.vim

"let mapleader=","
let mapleader=" "

" functions: http://www.ibm.com/developerworks/linux/library/l-vim-script-2/index.html

" The Smash Escape {
  " http://vimbits.com/bits/180
  inoremap jk <Esc>
  inoremap kj <Esc>
" }

" Movement in Insert mode - disabled {
  "inoremap <A-h> <C-o>h
  "inoremap <A-j> <C-o>j
  "inoremap <A-k> <C-o>k
  "inoremap <A-l> <C-o>l
  "inoremap <A-w> <C-o>w
  "inoremap <A-b> <C-o>b
  "inoremap <A-e> <C-o>e
" }

map \|    $h

nnoremap /    /\v
" // to not highlight search result
nnoremap //   :nohlsearch<CR>

" fold open/close at cursor location
nnoremap zz   za

" Comment out line in ~/.vimrc that map j to gj and k to gk
" Below seems not removing the mapping
if mapcheck('j', 'n')
  unmap j
  unmap k
endif

nnoremap <c-j> gj
nnoremap <c-k> gk

" Alignment by Tabularize {
  " /,/l1l0 to remove space before ',' but add one after ','
  nmap <Leader>a :Tabularize /
  vmap <Leader>a :Tabularize /
  nmap <Leader>a, :Tabularize /,/l0l1<CR>
  vmap <Leader>a, :Tabularize /,/l0l1<CR>
  nmap <Leader>a= :Tabularize /=<CR>
  vmap <Leader>a= :Tabularize /=<CR>
  nmap <Leader>a> :Tabularize /=><CR>
  vmap <Leader>a> :Tabularize /=><CR>
  nmap <Leader>a<space> :Tabularize / /l0l0<CR>
  vmap <Leader>a<space> :Tabularize / /l0l0<CR>
" }

"nnoremap <Leader>k :Ack<Space>
" Ag! will not open first result
nnoremap <Leader>k :Ag!<Space>

"http://superuser.com/questions/220666/how-do-you-reuse-a-visual-mode-selection
nnoremap vv gv

" Ctrl+A to select all
nnoremap <C-A> ggVG
" Ctrl+I to delete all
"nnoremap <C-I> gg1000d<CR>i

" Disable arrow keys {
  " based on recommendations on http://blog.sanctum.geek.nz/vim-anti-patterns/
  nnoremap <Up> <nop>
  nnoremap <Down> <nop>
  nnoremap <Left> <nop>
  nnoremap <Right> <nop>
" }

" unmap j/k to make relative jump work if there are line wraps
autocmd BufEnter if mapcheck('k', 'n') | unmap j | unmap k | endif

" Use mm and `` to set mark quickly
nnoremap `` `m
nnoremap <Leader>` :marks<CR>

" http://vimbits.com/bits/11
" Make Y behave like other capitals
nnoremap Y y$

" Reselect visual block after indent/outdent
vnoremap < <gv
vnoremap > >gv

" http://stackoverflow.com/questions/7163947/vim-paste-multiple-times
" 'p' to paste, 'gv' to re-select what was originally selected. 'y' to copy it again.
xnoremap p pgvy

nnoremap cc xi

nnoremap <Leader>;  ;
nnoremap <Leader>:  ,
nnoremap ;  :
"nnoremap !  :!
nnoremap <tab>  :!
nnoremap <Leader>m :map<Space>

"nnoremap \ :CommandT<CR>
"nnoremap <Leader>f :CommandTFlush<CR>
nnoremap \ :CtrlP<CR>
nnoremap <Leader>f :CtrlPClearCache<CR>

nnoremap <Leader>eh :e ~/work/dev_contrib/firefox/ProteusIndex.html<CR>
nnoremap <Leader>ez :e ~/.zshrc.local<CR>
nnoremap <Leader>em :e ~/.tmux.conf<CR>
nnoremap <Leader>eb :e ~/.vimrc.bundles.local<CR>
nnoremap <Leader>ev :e ~/.vimrc.local<CR>
nnoremap <Leader>et :e ~/Dropbox/notes/test
nnoremap <Leader>el :e ~/Dropbox/notes/diary.txt<CR>

"nnoremap <Leader>ev :source ~/.vimrc.local<CR>

if !exists("vimrc_autocommands_loaded")
  let vimrc_autocommands_loaded = 1
  " http://vimbits.com/bits/128
  " automatically reload vimrc when it's saved
  au BufWritePost .vimrc so ~/.vimrc
  au BufWritePost .vimrc.local so ~/.vimrc.local
  "au BufWritePost .vimrc.local PowerlineReloadColorscheme
endif

nnoremap <Leader>tt :TagbarToggle<CR><C-w>l
nnoremap <Leader>t/ :TagbarToggle<CR><C-w>l/

" Use qq to record a quick macro and @@ to replay it
nnoremap @@ @q

" http://vim.wikia.com/wiki/Set_working_directory_to_the_current_file
"autocmd BufEnter * silent! lcd %:p:h

" Remove trailing spaces
nnoremap <Leader>spa :%s/\v\s+$<CR>

" Wrap word with "
nnoremap <Leader>" i"<ESC>wwi"<ESC>
" Wrap word with '
nnoremap <Leader>' i'<ESC>wwi'<ESC>

" Map ,XXX to go to buffer XXX - disabled {
  nnoremap <Leader>0 :10b<CR>

  for i in range(1,200)
    execute "nnoremap <Leader>".i." :".i."b<CR>"
  endfor

  "nnoremap <Leader><Leader>0 :10b<CR>
  "for i in range(1,9)
  "  execute "nnoremap <Leader><Leader>".i." :".i."b<CR>"
  "endfor

  "ruby <<EOF
  "1.upto 400 do |i|
  "  VIM.command "nnoremap <Leader>#{i} :#{i}b<CR>"
  "end
  "EOF
" }

"nnoremap <Leader>, :bp<CR>
"nnoremap <Leader>. :bn<CR>
nnoremap <Leader>x :bd<CR>
nnoremap <Leader>X :BD<CR>

nnoremap H ^
vnoremap H ^
nnoremap L $
vnoremap L $

" Conque - disabled {
  " http://code.google.com/p/conque/wiki/Usage
  "let g:ConqueTerm_FastMode = 1
  "let g:ConqueTerm_InsertOnEnter = 1
  "let g:ConqueTerm_CWInsert = 1
  "" http://code.google.com/p/conque/wiki/Usage
  "nnoremap <Leader>shh :ConqueTermSplit  zsh<CR>
  "nnoremap <Leader>shv :ConqueTermVSplit zsh<CR>
" }

" CtrlP {
  " do not manage working directory
  let g:ctrlp_working_path_mode = 0
  let g:ctrlp_cmd = 'CtrlPBuffer'
  let g:ctrlp_max_history = 50
  let g:ctrlp_mruf_max = 50
  let g:ctrlp_max_files = 0

  " http://stackoverflow.com/a/23015287/120151
  " For some reason 'if exists(g:ctrlp_user_command)' does not work", so I
  " set it to some dummy value then unset it
  let g:ctrlp_user_command={}
  unlet g:ctrlp_user_command

  " http://stackoverflow.com/a/25871235
  let g:ctrlp_custom_ignore = {
      \ 'dir':  '\v[\/]\.(git|hg|svn)|node_modules|build|dist|target|coverage|bower_components$',
      \ 'file': '\v\.(exe|so|dll)$',
      \ 'link': 'SOME_BAD_SYMBOLIC_LINKS',
      \ }

  " https://github.com/kien/ctrlp.vim/issues/280#issuecomment-8638286
  let g:ctrlp_buffer_func = { 'enter': 'MyCtrlPMappings' }

  func! MyCtrlPMappings()
    nnoremap <buffer> <silent> <c-@> :call <sid>DeleteBuffer()<cr>
  endfunc

  func! s:DeleteBuffer()
    exec "bd" fnamemodify(getline('.')[2:], ':p')
    exec "norm \<F5>"
  endfunc
" }

" Buffers
"<C-6> to switch between current and last accessed buffer

" http://stackoverflow.com/questions/53664/how-to-effectively-work-with-multiple-files-in-vim/53702#53702
" Ctrl+Shift+6 to switch between 2 files 

" Remove auto close for " because it causes problem when editting vim files
"iunmap "

" Support coffeescript in ctags
" https://gist.github.com/mads379/907245
" ctags {
  nnoremap <leader>ct :!/usr/local/bin/ctags -R app<CR>
  if !("coffeescript_autocmd_loaded")
    let coffeescript_autocmd_loaded = 1
    autocmd BufWritePost * if filereadable('tags') | call system('ctags -a '.expand('%')) | endif
  endif
  nnoremap <c-[> :pop<CR>
  vnoremap <c-[> :pop<CR>
" }

" Tmux - disabled {
  " https://github.com/jgdavey/tslime.vim
  "vmap <C-x> <Plug>SendSelectionToTmux
  "nmap <C-x> <Plug>NormalModeSendToTmux
  "nmap <Leader>tmux <Plug>SetTmuxVars
  " Example for running a command in tmux
  "nmap \\ :Tmux ls<CR>

  " Open tmux command buffer
  "nnoremap <Leader>em :e ~/.vim-tmux<CR>
  " Map <CR> in insert mode
  "autocmd BufEnter .vim-tmux inoremap <CR> <ESC><C-x>
  "autocmd BufLeave .vim-tmux iunmap <CR>
" }

" XML/HTML formatting {
  " xmllint is part of libxml2
  " http://vim.wikia.com/wiki/Format_your_xml_document_using_xmllint
  nnoremap <Leader>tidy !xmllint --format -<CR>
  vnoremap <Leader>tidy !xmllint --format -<CR>
" }

" Maximize buffer {
  " http://vim.wikia.com/wiki/Maximize_window_and_return_to_previous_split_structure
  nnoremap <C-W>o :call MaximizeToggle ()<CR>
  inoremap <C-W>o :call MaximizeToggle ()<CR>

  function! MaximizeToggle()
    if exists("s:maximize_session")
      exec "source " . s:maximize_session
      call delete(s:maximize_session)
      unlet s:maximize_session
      let &hidden=s:maximize_hidden_save
      unlet s:maximize_hidden_save
    else
      let s:maximize_hidden_save = &hidden
      let s:maximize_session = tempname()
      set hidden
      exec "mksession! " . s:maximize_session
      only
    endif
  endfunction
" }

" https://github.com/spf13/spf13-vim/issues/68
autocmd BufNewFile,BufRead *.coffee set filetype=coffee

" <tab> was mapped to delete file content which is annoying
if mapcheck('<tab>', 'n')
  unmap <tab>
endif
if mapcheck('<esc>', 'n')
  unmap <esc>
endif

nnoremap <Leader><tab> i <esc>l
nnoremap <Leader><cr> i<cr><esc>
nnoremap <backspace> X

" http://stackoverflow.com/questions/6126871/easymotion-coloring-in-vim-with-solarized-theme
" change the default EasyMotion shading to something more readable with Solarized
hi link EasyMotionTarget ErrorMsg
hi link EasyMotionShade  Comment

" Open URL in browser {
  " http://vim.wikia.com/wiki/Open_a_web-browser_with_the_URL_in_the_current_line
  function! HandleURI()
    let s:uri = matchstr(getline("."), '[a-z]*:\/\/[^ >,;:]*')
    echo s:uri
    if s:uri != ""
      exec "!open \"" . s:uri . "\""
    else
      echo "No URI found in line."
    endif
  endfunction
  map <Leader>w :call HandleURI()<CR>
" }

nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

" ts=$HOME/bin/ts will send command to the second pane of iTerm and run
nnoremap <Leader>r :!ts ruby %<CR><CR>
" http://arstechnica.com/civis/viewtopic.php?f=16&t=94386
nnoremap <Leader>R :!ts rspec % -l <C-R>=line(".")<CR><CR>
nnoremap <F2>      :!ts<Space>
nnoremap <S-F2>    :!tl<CR><CR>

" Source this vim config file
"nnoremap <F5> :source %<CR>

" Run this file
"nnoremap <F5>      :!%<CR>
nnoremap <F5>      :!ts %<CR><CR>

inoremap <F6>    <ESC>ZZ<CR>
nnoremap <F6>    <ESC>ZZ<CR>

" http://vimdoc.sourceforge.net/htmldoc/editing.html#CTRL-^
"nnoremap <C-Space> :e #<CR>

" Run external command in current line {
  function! RunThis()
    let s:cmd = substitute(getline("."), "^[#$\"]", "", "")
    echo s:cmd
    if s:cmd != ""
      let s:vimCmd = matchstr(s:cmd, 'vim \zs.*')
      if s:vimCmd != ""
        exec s:vimCmd
      else
        exec '!ts "' . s:cmd . '"'
      end
    else
      echo "No command found in line."
    endif
  endfunction
  map <F4> :call RunThis()<CR>
" }

" vim e +507 ~/.vimrc
let g:indent_guides_enable_on_vim_startup = 0

" NERDTree {
  " http://stackoverflow.com/questions/1979520/auto-open-nerdtree-in-every-tab
  "autocmd VimEnter * NERDTree
  "autocmd VimEnter * wincmd w
  "autocmd BufEnter * NERDTreeMirror
  let NERDTreeQuitOnOpen=0
  let NERDTreeShowLineNumbers=1
  if mapcheck('<Leader>e', 'n')
    unmap <Leader>e
  end
  map <C-e> :NERDTreeFind<CR>
  map <F3> :NERDTreeToggle<CR>:NERDTreeMirror<CR>
  map <F10> <C-w>o
" }

"nnoremap <C-o> :e<Space>

"http://vim.wikia.com/wiki/Using_command-line_history
"nnoremap : q:dd
nnoremap q; q:dd
nnoremap q: q:dd
"nnoremap / q/i
"nnoremap ? q?i

nnoremap <Leader>sd :!svn diff %<CR>
nnoremap <Leader>gd :!git diff %<CR>

nnoremap <Leader>vb :VCSBlame<CR>
nnoremap <Leader>vl :VCSLog<CR>
nnoremap <Leader>vd :VCSVimDiff<CR>
nnoremap <Leader>vr :!svn revert %<CR><CR>
nnoremap <Leader>vu :!svn up<CR>
nnoremap <Leader>vc :!svn diff % -c
nnoremap <Leader>vv :!svn diff % 

" Commit a single file
nnoremap <Leader>ss :!svn add %; svn ci %<CR>
nnoremap <Leader>gs :!gitcommit %<CR>

if has('gui_macvim')
  "http://vim.1045645.n5.nabble.com/Remove-scrollbar-td1216911.html
  set guioptions-=r
  set guioptions-=L
  set transparency=0
  set fullscreen
  set guifont=Source\ Code\ Pro\ for\ Powerline:h13
endif

" https://github.com/fholgado/minibufexpl.vim
"hi MBENormal               guifg=#606060 guibg=fg

" Hints:
" ':verbose COMMAND' to show more detail of command result
" ? is search backward from end of the file, is the reverse of /.

au BufEnter Vagrantfile setlocal syntax=ruby

"if filereadable(expand(".ruby-version"))
"  exec 'Rvm'
"endif

" https://github.com/spf13/spf13-vim/pull/428#issuecomment-23410420
let g:airline_powerline_fonts=1
let g:airline_left_sep=''
let g:airline_right_sep=''

" http://superuser.com/questions/230081/in-vim-prevent-caret-moving-back-when-i-leave-edit-mode
"au InsertLeave * call cursor([getpos('.')[1], getpos('.')[2]+1])
"function! InsertLeaveHack()
"  let pos = getpos('.')
"  exec cursor([pos[1], pos[2]+1])
"endfunction
"au InsertLeave * call InsertLeaveHack()

UnBundle 'airblade/vim-gitgutter'

nnoremap <Leader>ps :!rm /tmp/profile.log<CR>:profile start /tmp/profile.log<CR>:profile func *<CR>:profile file *<CR>
nnoremap <Leader>pe :profile pause<CR>:qa<CR>
"nnoremap <Leader>pe :profile pause<CR>

"http://blog.davidfrancos.net/slow-syntastic-big-files/
let g:syntastic_enable_highlighting=0

" http://stackoverflow.com/a/5403847
autocmd WinEnter * call s:CloseIfOnlyNerdTreeLeft()
" Close all open buffers on entering a window if the only buffer that's left is the NERDTree buffer
function! s:CloseIfOnlyNerdTreeLeft()
  if exists("t:NERDTreeBufName")
    if bufwinnr(t:NERDTreeBufName) != -1
      if winnr("$") == 1
        q
      endif
    endif
  endif
endfunction

set listchars=tab:>-,trail:·
nmap <silent> <leader>s :set nolist!<CR>

nnoremap <leader>z :!zsh -i -c<space>

inoremap <F9>        <C-o>
"inoremap <ESC>       <ESC>l
"inoremap <ESC><ESC>  <ESC>l

cnoremap <C-a> <Home>
cnoremap <C-e> <End>
cnoremap <C-p> <Up>
cnoremap <C-n> <Down>
cnoremap <C-x> <Del>
cnoremap <C-d> <Left>
cnoremap <C-f> <Right>
cnoremap <C-h> <S-Left>
cnoremap <C-l> <S-Right>
"<C-w> Delete word backward

"" Undo mapping in .vimrc.local
"if mapcheck('<ESC><C-F>', 'i')
"  iunmap [F
"  iunmap [H
"endif

"" Move forward to char after x
nnoremap g(        f(l
nnoremap g)        f)l
nnoremap g[        f[l
nnoremap g]        f]l
nnoremap g{        f{l
nnoremap g}        f}l
nnoremap g<        f<l
nnoremap g>        f>l
nnoremap g'        f'l
nnoremap g"        f"l
nnoremap g,        f,l
nnoremap g.        f.l
nnoremap g:        f:l
nnoremap g=        f=l
nnoremap g-        f-l
nnoremap g_        f_l
nnoremap g/        f/l
nnoremap g@        f@l
nnoremap g#        f#l
nnoremap g&        f&l
nnoremap g*        f*l
nnoremap g+        f+l
nnoremap g\|       f\|l
nnoremap g\        f\l
nnoremap g?        f?l
nnoremap g<space>  f l
vnoremap g(        f(l
vnoremap g)        f)l
vnoremap g[        f[l
vnoremap g]        f]l
vnoremap g{        f{l
vnoremap g}        f}l
vnoremap g<        f<l
vnoremap g>        f>l
vnoremap g'        f'l
vnoremap g"        f"l
vnoremap g.        f.l
vnoremap g:        f:l
vnoremap g=        f=l
vnoremap g-        f-l
vnoremap g_        f_l
vnoremap g/        f/l
vnoremap g@        f@l
vnoremap g#        f#l
vnoremap g&        f&l
vnoremap g*        f*l
vnoremap g+        f+l
vnoremap g\|       f\|l
vnoremap g\        f\l
vnoremap g?        f?l
vnoremap g<space>  f l
"" Move backward to char before x
nnoremap G(        F(h
nnoremap G)        F)h
nnoremap G[        F[h
nnoremap G]        F]h
nnoremap G{        F{h
nnoremap G}        F}h
nnoremap G<        F<h
nnoremap G>        F>h
nnoremap G'        F'h
nnoremap G"        F"h
nnoremap G,        F,h
nnoremap G.        F.h
nnoremap G:        F:h
nnoremap G=        F=h
nnoremap G-        F-h
nnoremap G_        F_h
nnoremap G/        F/h
nnoremap G@        F@h
nnoremap G#        F#h
nnoremap G&        F&h
nnoremap G*        F*h
nnoremap G+        F+h
nnoremap G\|       F\|h
nnoremap G\        F\h
nnoremap G?        F?h
nnoremap G<space>  F h
vnoremap G(        F(h
vnoremap G)        F)h
vnoremap G[        F[h
vnoremap G]        F]h
vnoremap G{        F{h
vnoremap G}        F}h
vnoremap G<        F<h
vnoremap G>        F>h
vnoremap G'        F'h
vnoremap G"        F"h
vnoremap G.        F.h
vnoremap G:        F:h
vnoremap G=        F=h
vnoremap G-        F-h
vnoremap G_        F_h
vnoremap G/        F/h
vnoremap G@        F@h
vnoremap G#        F#h
vnoremap G&        F&h
vnoremap G*        F*h
vnoremap G+        F+h
vnoremap G\|       F\|h
vnoremap G\        F\h
vnoremap G?        F?h
vnoremap G<space>  F h

